{
  "compilerOptions": {
    // 目标代码（ts -> js(es5/es6)）
    "target": "esnext",
    // 目标代码需要使用的模块化方案（commonjs -> require/module.exports     es module -> import/export）  "module": "umd" 用得比较多 多种模块化
    "module": "esnext",
    // 打开一些严格的检查（any）
    "strict": true,
    // 要不要对jsx进行怎么样的处理   preserve：保持/不进行处理
    "jsx": "preserve",
    // 辅助的导入功能
    "importHelpers": true,
    // 按照node的方式去解析模块 import "./index.js/json"
    "moduleResolution": "node",
    // 跳过一些库的类型检测 (axios -> 类型  /  lodash -> @types/lodash   /   其他第三方库)
    "skipLibCheck": true,
    // export default 和 module.exports 能不能混合使用
    // ES Module 和 commonjs 能不能混合使用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // 要不要生成映射文件（ts -> js）
    "sourceMap": true,
    // 文件路径解析时，基本的url
    "baseUrl": ".",
    // 指定具体解析要使用的类型
    "types": ["webpack-env"],
    // 路径解析 类似于webpack alias
    "paths": {
      "@/*": ["src/*"],
      "components/*": ["src/components/*"]
    },
    // 可以指定在项目中可以使用哪些库的类型（Proxy/Window/Document）
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"]
  },
  // 有哪些ts代码需要编译解析
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  // 哪些不需要进行ts解析
  "exclude": ["node_modules"]
}
